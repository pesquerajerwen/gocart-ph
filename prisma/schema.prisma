// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum RoleName {
  customer
  admin
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

enum PaymentStatus {
  succeeded
  failed
}

model User {
  id           String    @id @default(cuid())
  supabaseId   String?    @unique
  email        String    @unique
  googleId     String? 
  roleId       String
  firstName    String?
  lastName     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  role         Role      @relation(fields: [roleId], references: [id])
  addresses    Address[]
  carts        Cart[]
  orders       Order[]
}

model Role {
  id          String  @id @default(cuid())
  name        RoleName @unique
  description String?

  users       User[]
}

model Address {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String
  lastName    String
  phone       String?
  addressLine1 String
  addressLine2 String?
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  orders      Order[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Decimal
  stock       Int
  categoryId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  category    Category   @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isActive  Boolean    @default(true)

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  addedAt   DateTime  @default(now())

  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Order {
  id          String       @id @default(cuid())
  userId      String
  addressId   String
  totalAmount Decimal
  status      OrderStatus  @default(pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  address     Address      @relation(fields: [addressId], references: [id])
  items       OrderItem[]
  payments    Payment[]
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  productName  String
  productPrice Decimal
  quantity     Int
  subtotal     Decimal

  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  stripePaymentId String?
  amount          Decimal
  status          PaymentStatus
  paidAt          DateTime?

  order           Order         @relation(fields: [orderId], references: [id])
}