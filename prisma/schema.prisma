// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum RoleName {
  customer
  admin
}

enum OrderStatus {
  pending
  paid
}

enum OrderItemStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum ProductStatus {
  active
  deactivated
}

enum StoreStatus {
  pending
  verified
  deactivated
}

model User {
  id           String    @id @default(cuid())
  supabaseId   String?    @unique
  email        String    @unique
  avatarUrl   String?
  roleId       String
  firstName    String?
  lastName     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  role         Role      @relation(fields: [roleId], references: [id])
  addresses    Address[]
  cartItems    CartItem[]
  orders       Order[]
  store        Store?
  reviews      Review[]
}

model Role {
  id          String  @id @default(cuid())
  name        RoleName @unique
  description String?

  users       User[]
}

model Address {
  id          String    @id @default(cuid())
  userId      String    
  fullName    String
  phone       String
  region      String
  province    String
  city        String
  barangay    String
  address     String
  zipcode     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDefault   Boolean   @default(false)

  user        User      @relation(fields: [userId], references: [id])
  orders      Order[]
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique @default("")
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]
}

model Store {
  id          String     @id @default(cuid())
  userId      String     @unique
  name        String     @unique
  description String
  avatarUrl   String
  address     String
  email       String
  contact     String
  status      StoreStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  products    Product[]
}

model Product {
  id            String         @id @default(cuid())
  categorySlug  String         @default("")
  storeId       String
  name          String     
  description   String?
  actualPrice   Decimal
  offerPrice    Decimal
  stock         Int
  status        ProductStatus  @default(active)
  totalRating   Int            @default(0)
  totalSales    Int            @default(0)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  category      Category       @relation(fields: [categorySlug], references: [slug])
  store         Store          @relation(fields: [storeId], references: [id])
  productImages ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
}

model ProductImage {
  id         String     @id @default(cuid())
  productId  String
  url        String
  isPrimary  Boolean

  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String     @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}



model Order {
  id          String       @id @default(cuid())
  userId      String
  addressId   String
  totalAmount Decimal
  status      OrderStatus  @default(pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  address     Address      @relation(fields: [addressId], references: [id])
  items       OrderItem[]
  payments    Payment[]
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  productName  String
  productPrice Decimal
  quantity     Int
  subtotal     Decimal

  status       OrderItemStatus @default(pending)
  review       Review?    
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model Review {
  id           String   @id @default(cuid())
  orderItemId  String   @unique
  productId    String   
  userId       String
  rating       Int
  comment      String 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  orderItem    OrderItem? @relation(fields: [orderItemId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String
  checkoutSessionId String
  paymentId         String
  paymentMethodType String
  amount            Decimal
  paidAt            DateTime

  order           Order         @relation(fields: [orderId], references: [id])
}